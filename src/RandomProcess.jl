abstract  RandomProcess

doc"""
  SampleInterval(tmin, tmax, npts)

Time interval for evaluluation of randowm process where tmin is the start time, tmax the end time
and npts the number of points in the sample.
"""
immutable SampleInterval{T<:Real}
  tmin::T
  tmax::T
  npts::UInt64
  SampleInterval(tmin, tmax, npts) = tmax > tmin && UInt64 > 0 ? new(tmin, tmax, npts) : error("must have tmax > tmin && npts > 0")
end

SampleInterval(tmin::Integer, tmax::Integer, δt::Integer) = SampleInterval(Float64(tmin), Float64(tmax), Float64(δt))
SampleInterval(tmin::Real, tmax::Real, δt::Real) = SampleInterval(promote(tmin, tmax, δt)...)
SampleInterval{T<:Real}(tmin::T, tmax::T, δt::T) = SampleInterval{T}(tmin, tmax, δt)

function samples(sampleInterval::SampleInterval)
    collect(linspace(sampleInterval.tmin, sampleInterval.tmax, sampleInterval.npts))
end

doc"""
  BrownianMotion(μ, σ)

Brownian motion generated by a normal distribution with mean μ and standard deviation σ.

https://en.wikipedia.org/wiki/Brownian_motion
"""
immutable BrownianMotion{T<:Real} <: RandomProcess
  μ::T
  σ::T
  BrownianMotion(μ, σ) = σ > 0 ? new(μ, σ) : error("must have σ > 0")
end

# outer constructors
BrownianMotion() = BrownianMotion(0.0, 1.0)
BrownianMotion(μ::Real) = BrownianMotion(μ, 1.0)
BrownianMotion(μ::Integer, σ::Integer) = BrownianMotion(Float64(μ), Float64(σ))
BrownianMotion(μ::Real, σ::Real) = BrownianMotion(promote(μ, σ)...)
BrownianMotion{T<:Real}(μ::T, σ::T) = BrownianMotion{T}(μ, σ)

# parameters
params(randomProcess::BrownianMotion) = (randomProcess.μ, randomProcess.σ)

# generation
function rand(randomProcess::BrownianMotion, sampleInterval::SampleInterval)
  Δt = (sampleInterval.tmax - sampleInterval.tmin) / sampleInterval.npts
  dist = Normal(randomProcess.μ, randomProcess.σ)
end
